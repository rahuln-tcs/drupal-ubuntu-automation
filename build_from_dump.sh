#!/bin/bash

# Treat unset variables as an error
set -o nounset

# Source configuration
source $1 || exit 126

# Validate and store second argument as a docroot.
cd ${SHARED_DIR}

if ! [ -e "$2" ]; then
  echo "$2 not found" >&2
  exit 1
fi
if ! [ -d "$2" ]; then
  echo "$2 not a directory" >&2
  exit 1
fi

#BUILD=$2;
echo -e "Build Started: ${BUILD}"

##
# Needed executables & drush commands
#
DRUSH=$(which drush) &> /dev/null \
  || { echo 'Missing drush. Aborting...' >&2; exit 127; }

which git &> /dev/null \
  || { echo 'Missing git. Aborting...'>&2; exit 127; }

# Import DATABASE. Third argument '0' to skipp db import and '1' for importing db.
if [ "$3" -eq "1" ]
then
  DB=$2
  echo 'Importing ${DB}.sql'
  drush sql-create --db-url=${DB_DRIVER}://${DB_USER}:${DB_PASS}@${DB_HOST}/${DB} -y
  drush sql-drop --db-url=${DB_DRIVER}://${DB_USER}:${DB_PASS}@${DB_HOST}/${DB} -y
  drush sql-cli --db-url=${DB_DRIVER}://${DB_USER}:${DB_PASS}@${DB_HOST}/${DB} < $2/database/$2.sql
else
  echo 'Skipped database import.'
fi


echo 'Adding database settings to settings.php'
BUILD_DIR=${SHARED_DIR}/${BUILD}
cd ${SHARED_DIR}
SETTINGS_FILE_DIR=${SHARED_DIR}/${BUILD}/sites/default/
sudo chmod -R 777 ${SETTINGS_FILE_DIR}/settings.php
sudo chown -R vagrant:vagrant ${SETTINGS_FILE_DIR}settings.php
FILE=${SETTINGS_FILE_DIR}settings.php

find="\$databases = array();"

replace="\$databases = array (
  'default' =>
  array (
    'default' =>
    array (
      'database' => '${DB}',
      'username' => '${DB_USER}',
      'password' => '${DB_PASS}',
      'host' => '${DB_HOST}',
      'port' => '',
      'driver' => '${DB_DRIVER}',
      'prefix' => '',
    ),
  ),
);"

#sed -i '/Begins with this text/s|'$TO_BE_REPLACED'|'$DATABASE_STRING'|g' $FILE
#echo $FILE | sed -e 's/${TO_BE_REPLACED}/${DATABASE_STRING}/g' $FILE
file_contents=$(<$FILE)
echo "${file_contents//$find/$replace}" > $FILE

##
# link new build to docroot
# commenting out below section as we are intended to create a new instance of
# database and codebase of the given profile.
#
cd ${WEB_DIR}
echo -ne "# Symlink ${BUILD_DIR} to ${WEB_DIR}/${BUILD}... "
if [ -L ${BUILD} ] ; then
  echo -ne "# Symlink ${BUILD} already exists, unlink ${BUILD}... "
  sudo unlink ${BUILD} 2>&1 \
    && echo -e "done\n" \
    || { echo -e  "FAILED 2!\n"; exit 2; }
fi
sudo ln -s ${BUILD_DIR} ${BUILD} 2>&1 \
  && echo -e "done\n" \
  || { echo -e "FAILED 3.2!\n"; exit 3.2; }

# Files directory (local dev)
sudo chmod -R 777 ${FILE_DIR}
sudo chown -R vagrant:vagrant ${BUILD_ROOT}
# Files directory (remote dev/stage/prod)
#sudo chown -R _www:_www /var/www/html/${BUILD}/sites/default/files

##
# Create virtual directory configuration file for this build
#
cd ${CONF_DIR}
sudo touch ${CONF}
sudo chmod -R 777 ${CONF}
sudo chown -R vagrant:vagrant ${CONF}
FILE=${CONF}
echo "# ************************************
# Vhost template generated by build script.
# ************************************

<VirtualHost *:80>
  ServerName ${BUILD_ROOT}.demoserver.com

  ## Vhost docroot
  DocumentRoot "${BUILD_ROOT}"

  ## Directories, there should at least be a declaration for /www/rml/current

  <Directory "${BUILD_ROOT}">
    Options FollowSymLinks
    AllowOverride all
    Order allow,deny
    Allow from all
  </Directory>

  ## Load additional static includes

  ## Logging
  ErrorLog "/var/log/apache2/${BUILD}.demoserver.com_error_log"
  ServerSignature Off
  CustomLog "/var/log/apache2/${BUILD}.demoserver.com_access_log" "combined1"

  ## Rewrite rules
  RewriteEngine On

  ## Server aliases
  ServerAlias ${BUILD}.demoserver.com

  ## Custom fragment
<IfModule php5_module>
  php_value upload_max_filesize 10M
  php_value post_max_size 10M
</IfModule>

</VirtualHost>
<VirtualHost *:443>
 ServerName ${BUILD}.demoserver.com
 DocumentRoot ${BUILD_ROOT}

 SSLEngine on
 SSLCipherSuite AES256+EECDH:AES256+EDH
 SSLProtocol All -SSLv2 -SSLv3
 SSLHonorCipherOrder On
 SSLCompression off
 SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem
 SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key

 <Directory ${BUILD_ROOT}>
   AllowOverride All
   Options -Indexes +FollowSymLinks
   Require all granted
 </Directory>
 </VirtualHost>
 " >> $FILE

sudo a2ensite $FILE
sudo service apache2 reload

function removehost() {
    if [ -n "$(grep $HOSTNAME /etc/hosts)" ]
    then
        echo "$HOSTNAME Found in your $ETC_HOSTS, Removing now...";
        sudo sed -i".bak" "/$HOSTNAME/d" $ETC_HOSTS
    else
        echo "$HOSTNAME was not found in your $ETC_HOSTS";
    fi
}

function addhost() {
    IP="127.0.0.1"
    HOSTNAME=$1
    HOSTS_LINE="$IP\t$HOSTNAME"
    ETC_HOSTS="/etc/hosts"

    if [ -n "$(grep $HOSTNAME /etc/hosts)" ]
        then
            echo "$HOSTNAME already exists : $(grep $HOSTNAME $ETC_HOSTS)"
        else
            echo "Adding $HOSTNAME to your $ETC_HOSTS";
            sudo -- sh -c -e "echo '$HOSTS_LINE' >> /etc/hosts";

            if [ -n "$(grep $HOSTNAME /etc/hosts)" ]
                then
                    echo "$HOSTNAME was added succesfully \n $(grep $HOSTNAME /etc/hosts)";
                else
                    echo "Failed to Add $HOSTNAME, Try again!";
            fi
    fi
}

##
# write host entry to the hosts file.
#
echo -e "\n# Adding hosts entry to hosts file...\n"
#sudo su
#FILE=${HOSTS}
#echo "127.0.0.1 ${BUILD}.demoserver.com" >> $FILE
HOSTNAME=${BUILD}.demoserver.com
addhost ${HOSTNAME}
echo -e "\n# Host entry added--\n127.0.0.1 ${BUILD}.demoserver.com\n"

sudo mkdir ${BUILD_INFO_DIR}
sudo chmod -R 777 ${BUILD_INFO_DIR}
sudo chown -R vagrant:vagrant ${BUILD_INFO_DIR}
FILE=${BUILD_INFO_DIR}/build-record-existing.txt

cd ${WEB_DIR}/${BUILD}
drush pm-disable securepages -y
drush pm-disable paranoia -y

# Add default htaccess
cp /home/vagrant/build/.htaccess .

#Create a new administrator user. Permissions can be changed according to the site.
drush sqlq "UPDATE users SET name = 'admin' WHERE users.uid = 1;"
drush upwd admin --password="admin"

echo "${BUILD}" >> $FILE

exit 0
