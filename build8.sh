#!/bin/bash
# Treat unset variables as an error
set -o nounset

# Source configuration
source $1 || exit 126

#source $2
echo -e "${BUILD}"

##
# Needed executables & drush commands
#
DRUSH=$(which drush) &> /dev/null \
  || { echo 'Missing drush. Aborting...' >&2; exit 127; }

# Specific path to drush version for drush site-install
set +o nounset
[ -z "$DRUSH_SITE_INSTALL_DRUSH" ] && DRUSH_SITE_INSTALL_DRUSH=${DRUSH}
set -o nounset

which git &> /dev/null \
  || { echo 'Missing git. Aborting...'>&2; exit 127; }

## drush help make &> /dev/null \ || { echo "Could not probe 'drush make'. Aborting...">&2; exit 127; }

${DRUSH_SITE_INSTALL_DRUSH} help site-install &> /dev/null \ || { echo "Could not probe 'drush site-install'. Aborting...">&2; exit 127; }


##
# run drush make
#
cd ${SHARED_DIR}
## echo -e "# Running drush make, create new build ${BUILD} with ${BUILD_MAKEFILE}...\n"

sudo composer create-project drupal/drupal ${BUILD}

##
# link new build to docroot
# commenting out below section as we are intended to create a new instance of
# database and codebase of the given profile.
#
cd ${WEB_DIR}
BUILD_DIR=${SHARED_DIR}/${BUILD}
if [ -L ${DOC_ROOT} ] ; then
  echo -ne "# Symlink ${BUILD} already exists, unlink ${BUILD}... "
  sudo unlink ${DOC_ROOT} 2>&1 \
    && echo -e "done\n" \
    || { echo -e  "FAILED 2!\n"; exit 2; }
fi
echo -ne "# Symlink ${BUILD} to ${WEB_DIR}/${DOC_ROOT}... "
sudo ln -s ${BUILD_DIR} ${DOC_ROOT} 2>&1 \
  && echo -e "done\n" \
  || { echo -e "FAILED 3!\n"; exit 3; }

echo -ne "# Symlink ${BUILD_DIR} to ${WEB_DIR}/${BUILD}... "
sudo ln -s ${BUILD_DIR} ${BUILD} 2>&1 \
  && echo -e "done\n" \
  || { echo -e "FAILED 3.2!\n"; exit 3.2; }

##
# run drush site-install (and drop existing tables)
# set sendmail path to /usr/bin/true if it is not configured properly.

echo -e "# Running drush site-install...\n"
sudo /usr/bin/env PHP_OPTIONS="-d sendmail_path=`which true`" ${DRUSH_SITE_INSTALL_DRUSH} site-install ${BUILD_PROFILE} ${SI_OPTIONS} -y -r ${WEB_DIR}/${DOC_ROOT} \
 --db-url=${DB_DRIVER}://${DB_USER}:${DB_PASS}@${DB_HOST}/${DB} \
 --account-name=${DRUPAL_UID1} \
 --account-pass=${DRUPAL_UID1_PASS} \
 --site-name=${DRUPAL_SITE_NAME} 2>&1 \
 && echo -e "\n# Site installation was successful." \
 || { echo -e "\n# FAILED 4!"; exit 4; }

# Files directory (local dev)
sudo chmod -R 777 ${FILE_DIR}
sudo chown -R vagrant:vagrant ${BUILD_ROOT}
# Files directory (remote dev/stage/prod)
#sudo chown -R _www:_www /var/www/html/${BUILD}/sites/default/files

##
# Create virtual directory configuration file for this build
#
cd ${CONF_DIR}
sudo touch ${CONF}
sudo chmod -R 777 ${CONF}
sudo chown -R vagrant:vagrant ${CONF}
FILE=${CONF}
echo "# ************************************
# Vhost template generated by build script.
# ************************************

<VirtualHost *:80>
  ServerName ${BUILD}.demoserver.com

  ## Vhost docroot
  DocumentRoot "/var/www/${BUILD}"

  ## Directories, there should at least be a declaration for /www/rml/current

  <Directory "/var/www/${BUILD}">
    Options FollowSymLinks
    AllowOverride all
    Order allow,deny
    Allow from all
  </Directory>

  ## Load additional static includes

  ## Logging
  ErrorLog "/var/log/apache2/${BUILD}.demoserver.com_error_log"
  ServerSignature Off
  CustomLog "/var/log/apache2/${BUILD}.demoserver.com_access_log" "combined1"

  ## Rewrite rules
  RewriteEngine On

  ## Server aliases
  ServerAlias ${BUILD}.demoserver.com

  ## Custom fragment
<IfModule php5_module>
  php_value upload_max_filesize 10M
  php_value post_max_size 10M
</IfModule>

</VirtualHost>" >> $FILE

sudo a2ensite $FILE
sudo service apache2 reload

function removehost() {
    if [ -n "$(grep $HOSTNAME /etc/hosts)" ]
    then
        echo "$HOSTNAME Found in your $ETC_HOSTS, Removing now...";
        sudo sed -i".bak" "/$HOSTNAME/d" $ETC_HOSTS
    else
        echo "$HOSTNAME was not found in your $ETC_HOSTS";
    fi
}

function addhost() {
    IP="127.0.0.1"
    HOSTNAME=$1
    HOSTS_LINE="$IP\t$HOSTNAME"
    ETC_HOSTS="/etc/hosts"

    if [ -n "$(grep $HOSTNAME /etc/hosts)" ]
        then
            echo "$HOSTNAME already exists : $(grep $HOSTNAME $ETC_HOSTS)"
        else
            echo "Adding $HOSTNAME to your $ETC_HOSTS";
            sudo -- sh -c -e "echo '$HOSTS_LINE' >> /etc/hosts";

            if [ -n "$(grep $HOSTNAME /etc/hosts)" ]
                then
                    echo "$HOSTNAME was added succesfully \n $(grep $HOSTNAME /etc/hosts)";
                else
                    echo "Failed to Add $HOSTNAME, Try again!";
            fi
    fi
}

##
# write host entry to the hosts file.
#
echo -e "\n# Adding hosts entry to hosts file...\n"
#sudo su
#FILE=${HOSTS}
#echo "127.0.0.1 ${BUILD}.demoserver.com" >> $FILE
HOSTNAME=${BUILD}.demoserver.com
addhost ${HOSTNAME}
echo -e "\n# Host entry added--\n127.0.0.1 ${BUILD}.demoserver.com\n"

sudo mkdir ${BUILD_INFO_DIR}
sudo chmod -R 777 ${BUILD_INFO_DIR}
sudo chown -R vagrant:vagrant ${BUILD_INFO_DIR}
FILE=${BUILD_INFO_DIR}/build-record-existing.txt

echo "${BUILD}" >> $FILE

exit 0
